[{"categories":[],"content":"Create a shorter aliases for original URLs.","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"前陣子在準備 System Design 時一直看到經典的短網址設計問題，直到近期比較有空決定自己實作一遍，同時把過程中遇到的重點記錄下來。 專案目標： 實現一個類似於 TinyURL 的短網址服務 練習概念驗證 (Proof of Concepts, POC) ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:0:0","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"短網址的目的？ 確保網址長度能夠在任何平台/瀏覽器上正常發送 將原始網址替換成有識別度的別名 提高網址轉換成 QRCode 時的辨識準確度 ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:1:0","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"短網址的運作原理 首先，我們只針對短網址服務的核心業務流程做分析： 從業務流程中能發想的問題點 (Functional Requirements)： 短網址驗證的注意事項 短網址有效期限的設計考量 重新導向的設計考量 從系統層面延伸的問題發想 (Non-Functional Requirements)： 服務的負載瓶頸？ 短網址演算法的選擇？ 業務場景中的資料讀寫比例？ 服務監控指標的設計考量 ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:2:0","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"預估系統負載 確定好核心業務後，下一步開始針對業務場景提出負載預估，每次看到大神等級的人都能逐一分析出不同面向的成本預估，而我做起來就像在雲開發 🫥 總之，接著開始吧 ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:3:0","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"1. 使用場景 從上圖來看，相同性質的產品中以 tinyurl.com 的 1 億次月流量穩坐龍頭 我們假設短網址的讀寫比例為 100 : 1，換句話說每 1 條短網址平均會有 100 次的點擊量，因此以 tinyurl.com 而言，可以先整理出來的基本資訊有： 每個月大約會產生 100 萬筆短網址，以及後續的 1 億次的短網址跳轉請求 前者的 RPS (Requests Per Second) 約 1M URLs / (30 days * 24 hours * 3,600 seconds) ~= 0.4 URLs/s 同理，後者的 RPS 約 40 URLs/s 峰值的計算參考八二法則，即一天中 80% 的流量會集中在 20% 的時間裡： 產生短網址的請求峰值約為 (1M URLs / 30 days * 80%) / (86,400 seconds * 20%) ~= 1.5 URLs/s 同理，跳轉請求的峰值約為 150 URLs/s ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:3:1","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"2. 網路傳輸 實際在 tinyurl.com 使用 Chrome DevTools 分析可以得到： 每產生一筆短網址的封包傳輸量約為 1k bytes 每次跳轉請求封包傳輸量約為 500 bytes 沿用一開始計算出的流量可以得到： 產生短網址的網路傳輸量為 0.4 URLs * 1k bytes ~= 400 B/s 峰值約為 1.5 URLs * 1k bytes ~= 1.5 KB/s 短網址跳轉為 40 URLs * 500 bytes ~= 20 KB/s 峰值約為 75 KB/s ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:3:2","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"3. 資料儲存 我們以 response payload 的封包大小 600 bytes 為假設： 每一年總共會產生 1M URLs * 12 months ~= 12M URLs/year 筆短網址 每一年資料儲存量為 12M URLs * 600 bytes ~= 7.2 GB ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:3:3","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"4. 資料快取 為了加快服務的響應速度，我們通常會將常用的資料保留在 server 上，在這裡就是短網址，一樣以八二法則為例，倘若我們希望保留近三個月的熱門網址查詢記錄，所需要的記憶體大小為： 1M URLs * 3 months * 600 bytes * 20% ~= 360 MB 有了上述這些參考資料後，在後續開發與測試上就能以更精確的數字帶入使用 ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:3:4","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"產品原型規劃 prototype 的相關開發文件請直接瀏覽我的 GitHub Repo，包含： 核心功能技術文件、DB Schema、部署與啟動方式、整合測試、etc. ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:4:0","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"實驗結果 機器規格如下： 機器型號：MacBook Pro 14\" 2021 CPU：Apple M1 Pro RAM：32 GB 所有服務皆透過 Docker-compose 啟動，主要服務統一以下設定： e.g. TinyURL server、MySQL、Redis 詳細配置請見 deployment services: {service}: ... ... deploy: resources: limits: cpus: \"2\" memory: 4G reservations: memory: 2G ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:5:0","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"Locust Benchmark with 1000 users \u0026 10 minutes 上圖是使用 locust.io 這套 Python 的壓測工具實測出來的結果，以 100 : 1 的讀寫請求模擬使用場景，RPS 平均落在 ~1460 左右 ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:5:1","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"Grafana Server Grafana with TinyURL server metrics 同一時間 Prometheus 對 Server 採集到的指標 MySQL Grafana with MySQL metrics Grafana with MySQL metrics 僅擷取 MySQL 的部分 metrics，可以發現 server 對 MySQL 的請求數並不高，QPS 僅有 40~50 Redis Grafana with Redis metrics 原因在於大部分的查詢都能在 Redis 處理完畢 更多的測試模擬可以從 python script 中找到，這裡就不逐一展開 有興趣的朋友可以下載我的 repo 後自行使用，過程中若有遇到問題也歡迎提供給我一起研究 ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:5:2","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"技術筆記 ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:6:0","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"MurmurHash3 針對 加密雜湊算法 與 非加密雜湊算法 之間的原理，我想留到下次在針對這個主題做完整的筆記 這裡只列出 MurmurHash3 與其他雜湊算法的 10 萬次壓測結果比較 ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:6:1","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"後記 這次的 side project 讓我釐清了很多當時在看 System Design 時不清楚的設計目的，但也因為這次主要是為了練習 POC，因此在實作過程中省略了不少細節考量： e.g. 跨資料庫時的一致性保證、災難復原 \u0026 故障轉移機制、限流機制、etc. 針對 POC 來說，這次主要練習了從零到一過程中的 需求分析 ➜ 可行性評估 ➜ 撰寫開發文件 ➜ 需求開發 ➜ 釋出 protype ➜ 壓力測試 \u0026 系統監控 在工作中除非能夠從頭參與項目誕生，否則上述流程通常在初期就會決定完畢，後期大部分時間都是根據現有框架繼續開發需求或小規模重構/優化 隨著專案日漸龐大也越難有大規模改造的機會，因此這次的 side project 是個不錯的練習，可以補足平常較少接觸到的部分，之後有空時再來挑選其他主題繼續練習 POC ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:7:0","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"References TinyURL Semrush 短 URL 系统是怎么设计的？ ","date":"2022-11-14","objectID":"/2022-11-14_sideproject-tinyurl/:8:0","tags":["Golang","Side Project","System Design","TinyURL"],"title":"Side Project: URL Shortening service","uri":"/2022-11-14_sideproject-tinyurl/"},{"categories":[],"content":"千里之行，始於足下","date":"2022-11-09","objectID":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/","tags":["Hugo","GitPages","GitAction"],"title":"個人網站架設紀錄 #1","uri":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/"},{"categories":[],"content":"Blog 的第一篇文章就用來記錄自己從零到一的個人網站架設紀錄，使用到的工具如下： Hugo Github ","date":"2022-11-09","objectID":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/:0:0","tags":["Hugo","GitPages","GitAction"],"title":"個人網站架設紀錄 #1","uri":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/"},{"categories":[],"content":"Hugo 網路上有很多對於 Hugo 的說明以及教學，在這裡我就不多做介紹了，有興趣的話可以直接 Google Hugo 的關鍵字搜尋，我選擇 Hugo 的原因很簡單： 社群活躍度高，模板豐富 編譯速度快，請參考: Hugo vs Jekyll: Benchmark ","date":"2022-11-09","objectID":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/:1:0","tags":["Hugo","GitPages","GitAction"],"title":"個人網站架設紀錄 #1","uri":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/"},{"categories":[],"content":"Quick Start 環境建置可以直接參考官方文件，裡面有詳細的教學流程可以快速建置出一個 Demo Site 備註：我是使用 macOS + Homebrew 進行安裝 ","date":"2022-11-09","objectID":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/:1:1","tags":["Hugo","GitPages","GitAction"],"title":"個人網站架設紀錄 #1","uri":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/"},{"categories":[],"content":"Theme 接著到 Hugo Themes 挑選自己喜歡的模板後，透過下面的方式引用 git submodule add [-b \u003cbranch\u003e] [--name \u003cname\u003e] # e.g. # git submodule add https://github.com/dillonzq/LoveIt.git themes/hugo-theme-loveit 記得到根目錄下的 config.yaml 或 config.toml 指定該樣板 ... # See Module Config for how to import a theme. title: \"your-theme\" ... 其餘的參數設定可以到 Configure Hugo 查詢 ","date":"2022-11-09","objectID":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/:1:2","tags":["Hugo","GitPages","GitAction"],"title":"個人網站架設紀錄 #1","uri":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/"},{"categories":[],"content":"giscus 將 GitHub Discussions 嵌入至個人網站成為訪客使用的留言系統，詳細運作原理與快速設定請參考 giscus 設定好後可視 theme 本身是否已經預留 giscus 的擴充功能，或是自行嵌入頁面 這邊 shout out to LoveIt Hugo Theme 的作者，真的簡潔乾淨又好用 🫡 ","date":"2022-11-09","objectID":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/:1:3","tags":["Hugo","GitPages","GitAction"],"title":"個人網站架設紀錄 #1","uri":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/"},{"categories":[],"content":"Github 有了個人網站的雛形後，可以嘗試將網站發佈到 GitHub 上看看結果怎麼樣，執行以下操作編譯靜態網站： hugo --minify 編譯結果會放在根目錄下的 /public 內，接著將靜態網站推送到 GitHub Pages 的專案位置就完成了，如果還沒有 GitHub Pages 的人可以到這裡查看官方的建置文件 ","date":"2022-11-09","objectID":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/:2:0","tags":["Hugo","GitPages","GitAction"],"title":"個人網站架設紀錄 #1","uri":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/"},{"categories":[],"content":"Git Action 為了讓日後只需專注在內容的產出，我們可以建立 Git Action 當 main branch 更新時就自動幫我們執行部署流程，workflow 的腳本可以參考官方的部署文件 部署工具 peaceiris/actions-gh-pages 記得在第一次執行腳本後要到 repo 設定 GitPages 的預設分支到 gh-pages 上，當然也可以改成自己喜歡的分支，還是不清楚的話可以參考 GitHub 的教學文件 Configuring a publishing source for your GitHub Pages site 至此，我們就完成了使用 Hugo Framework + GitPages 的個人網站建置，日後有時間會再將更多的管理工具依序加入，例如： 內容管理服務: Forestry.io 網站內容即時搜尋服務: Algolia 網站流量統計服務: Google Analytics 廣告服務: Google Ads ","date":"2022-11-09","objectID":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/:2:1","tags":["Hugo","GitPages","GitAction"],"title":"個人網站架設紀錄 #1","uri":"/2022-11-09_%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E6%9E%B6%E8%A8%AD%E7%B4%80%E9%8C%84-1/"},{"categories":null,"content":"About","date":"2022-11-10","objectID":"/about/","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"關於我 嗨，我是劉建宏，你也可以叫我小六或是 Jian，現職 Paradise-Soft 的 TPM。 喜歡研究技術與業務的結合，理解團隊文化的重要性，以及如何建立高效率團隊。 ","date":"2022-11-10","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"經歷 ","date":"2022-11-10","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"2022/05 ~ Now Technical Program Manager @Paradise-Soft ","date":"2022-11-10","objectID":"/about/:2:1","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"2020/09 ~ 2022/05 Backend Team Lead @Paradise-Soft ","date":"2022-11-10","objectID":"/about/:2:2","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"2020/03 ~ 2020/09 Sr. Backend Engineer @Paradise-Soft ","date":"2022-11-10","objectID":"/about/:2:3","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"2018/07 ~ 2020/01 Software Engineer @光晨科技 ","date":"2022-11-10","objectID":"/about/:2:4","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"2017/01 ~ 2018/04 Co-Founder @wooSeven ","date":"2022-11-10","objectID":"/about/:2:5","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"2016/07 ~ 2016/10 Intern @恩連科技 ","date":"2022-11-10","objectID":"/about/:2:6","tags":null,"title":"About","uri":"/about/"}]